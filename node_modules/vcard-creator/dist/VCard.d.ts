import { Element, Format, Property } from './types/VCard';
export default class VCard {
    /**
     * Default Charset
     *
     * @var string
     */
    charset: string;
    /**
     * Default ContentType
     *
     * @var string
     */
    private contentType;
    /**
     * Default filename
     *
     * @var string
     */
    private filename;
    /**
     * Default fileExtension
     *
     * @var string
     */
    private fileExtension;
    /**
     * Properties
     *
     * @var array
     */
    private properties;
    /**
     * definedElements
     *
     * @var object
     */
    private definedElements;
    /**
     * Multiple properties for element allowed
     *
     * @var array
     */
    private multiplePropertiesForElementAllowed;
    /**
     * Defines the output format
     *
     * @var bool
     */
    private useVCalendar;
    constructor(format?: Format);
    /**
     * Set format
     *
     * @param  {Format} format Either 'vcard' or 'vcalendar'
     * @return {void}
     */
    setFormat(format?: Format): void;
    /**
     * Add address
     *
     * @param  {string} [name='']
     * @param  {string} [extended='']
     * @param  {string} [street='']
     * @param  {string} [city='']
     * @param  {string} [region='']
     * @param  {string} [zip='']
     * @param  {string} [country='']
     * @param  {string} [type='']
     * 'type' may be DOM | INTL | POSTAL | PARCEL | HOME | WORK
     * or any combination of these: e.g. 'WORK;PARCEL;POSTAL'
     * @return {this}
     */
    addAddress(name?: string, extended?: string, street?: string, city?: string, region?: string, zip?: string, country?: string, type?: string): this;
    /**
     * Add birthday
     *
     * @param  {string} date Format is YYYY-MM-DD
     * @return {this}
     */
    addBirthday(date: string): this;
    /**
     * Add company
     *
     * @param  {string} company
     * @param  {string} department
     * @return {this}
     */
    addCompany(company: string, department?: string): this;
    /**
     * Add email
     *
     * @param  {string} address The e-mail address
     * @param  {string} [type='']
     * The 'type' of the email address
     * type may be  PREF | WORK | HOME
     * or any combination of these: e.g. 'PREF;WORK'
     * @return {this}
     */
    addEmail(address: string, type?: string): this;
    /**
     * Add jobtitle
     *
     * @param  {string} jobtitle The jobtitle for the person.
     * @return {this}
     */
    addJobtitle(jobtitle: string): this;
    /**
     * Add role
     *
     * @param  {string} role The role for the person.
     * @return {this}
     */
    addRole(role: string): this;
    /**
     * Add a photo or logo (depending on property name)
     *
     * @param  {string}  property 'LOGO' | 'PHOTO'
     * @param  {string}  url      Image url or filename
     * @param  {Element} element  The name of the element to set
     * @return {this}
     */
    private addMediaURL;
    /**
     * Add a photo or logo (depending on property name)
     *
     * @param  {string}  property 'LOGO' | 'PHOTO'
     * @param  {string}  content  Image content
     * @param  {string}  mime     Image MIME type
     * @param  {Element} element  The name of the element to set
     * @throws VCardException
     * @return {this}
     */
    private addMediaContent;
    /**
     * Add name
     *
     * @param  {string} [lastName='']
     * @param  {string} [firstName='']
     * @param  {string} [additional='']
     * @param  {string} [prefix='']
     * @param  {string} [suffix='']
     * @return {this}
     */
    addName(lastName?: string, firstName?: string, additional?: string, prefix?: string, suffix?: string): this;
    /**
     * Add nickname
     *
     * @param  {string|string[]} nickname
     */
    addNickname(nickname: string | string[]): this;
    /**
     * Add note
     *
     * @param  {string} note
     * @return {this}
     */
    addNote(note: string): this;
    /**
     * Add categories
     *
     * @param  {Array<string>} categories
     * @return {this}
     */
    addCategories(categories: string[]): this;
    /**
     * Add phone number
     *
     * @param  {number | string} number
     * @param  {string} [type='']
     * 'type' may be PREF | WORK | HOME | VOICE | FAX | MSG |
     * CELL | PAGER | BBS | CAR | MODEM | ISDN | VIDEO
     * or any senseful combination, e.g. 'PREF;WORK;VOICE'
     * @return {this}
     */
    addPhoneNumber(number: number | string, type?: string): this;
    /**
     * Add Logo
     *
     * @link   https://tools.ietf.org/html/rfc2426#section-3.5.3
     * @param  {string} url Image url or filename
     * @return {this}
     */
    addLogoURL(url: string): this;
    /**
     * Add Logo
     *
     * @link   https://tools.ietf.org/html/rfc2426#section-3.5.3
     * @param  {string} image     Base64 encoded image content
     * @param  {string} [mime=''] Image content MIME type (defaults to 'JPEG')
     * @return {this}
     */
    addLogo(image: string, mime?: string): this;
    /**
     * Add Photo
     *
     * @link   https://tools.ietf.org/html/rfc2426#section-3.1.4
     * @param  {string} url Image url or filename
     * @return {this}
     */
    addPhotoURL(url: string): this;
    /**
     * Add Photo
     *
     * @link   https://tools.ietf.org/html/rfc2426#section-3.1.4
     * @param  {string} image     Base64 encoded image content
     * @param  {string} [mime=''] Image content MIME type (defaults to 'JPEG')
     * @return {this}
     */
    addPhoto(image: string, mime?: string): this;
    /**
     * Add URL
     *
     * @param  {string} url
     * @param  {string} [type=''] Type may be WORK | HOME
     * @return {this}
     */
    addURL(url: string, type?: string): this;
    /**
     * Add social profile
     *
     * @param {string} url  The URL to the user's profile.
     * @param {string} type The social media type (e.g., Twitter, LinkedIn, etc.)
     * @param {string} user The user's social media handle/username
     */
    addSocial(url: string, type: string, user?: string): this;
    /**
     * Add UID
     *
     * @param  {string} uid
     * @return {this}
     */
    addUID(uid: string): this;
    /**
     * Build vCard (.vcf)
     *
     * @return {string}
     */
    buildVCard(): string;
    /**
     * Build VCalender (.ics) - Safari (< iOS 8) can not open .vcf files, so we
     * have build a workaround.
     *
     * @return {string}
     */
    buildVCalendar(): string;
    /**
     * Get output as string
     *
     * @return {string}
     */
    toString(): string;
    /**
     * Get charset
     *
     * @return {string}
     */
    getCharset(): string;
    /**
     * Get charset string
     *
     * @return {string}
     */
    getCharsetString(): string;
    /**
     * Get content type
     *
     * @return {string}
     */
    getContentType(): string;
    /**
     * Get filename
     *
     * @return {string}
     */
    getFilename(): string;
    /**
     * Get file extension
     *
     * @return {string}
     */
    getFileExtension(): string;
    /**
     * Get output as string
     *
     * iOS devices (and safari < iOS 8 in particular)can not read .vcf (= vcard)
     * files. So there is a workaround to build a .ics (= vcalender) file.
     *
     * @return {string}
     */
    getOutput(): string;
    /**
     * Get properties
     *
     * @return {Array<{key: string, value: string}>}
     */
    getProperties(): Property[];
    /**
     * Has property
     *
     * @param  {string} key
     * @return {boolean}
     */
    hasProperty(key: string): boolean;
    /**
     * Set charset
     *
     * @param  {string} charset
     * @return {void}
     */
    setCharset(charset: string): void;
    /**
     * Set filename
     *
     * @param  {string} value
     * @return {void}
     */
    setFilename(value: string): void;
    /**
     * Set property
     *
     * @param  {Element} element The element name you want to set,
     *                           e.g.: name, email, phoneNumber, ...
     * @param  {string}  key
     * @param  {string}  value
     * @throws {VCardException}
     * @return {void}
     */
    setProperty(element: Element, key: string, value: string): void;
}
